# 워크플로우의 이름
name: CI/CD with Spring Boot and AWS EC2

# 어떤 이벤트가 발생했을 때 이 워크플로우를 실행할지 정의
on:
  push:
    branches:
      - main  # main 브랜치에 코드가 푸시될 때 워크플로우 실행

# 워크플로우를 실행할 작업들 (Jobs)
jobs:
  build:
    # 워크플로우를 실행할 가상 환경 (운영체제)
    runs-on: ubuntu-latest

    # 작업의 단계들 (Steps)
    steps:
      # 1. 저장소 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # 5. SSH 키 파일 생성 (배포를 위해)
      - name: Create SSH key file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 6. EC2로 JAR 파일 전송 및 애플리케이션 재시작
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}             # EC2 퍼블릭 IP
          username: ec2-user                       # EC2 접속 사용자 이름
          key: ${{ secrets.SSH_PRIVATE_KEY }}      # GitHub Secrets에 등록한 SSH 키
          # 실행할 명령어들
          script: |
            sudo kill -9 $(sudo lsof -t -i:8090) || true # 기존 애플리케이션 종료
            cd /home/ec2-user
            rm -f StopNoise-0.0.1-SNAPSHOT.jar      # 기존 JAR 파일 삭제
            mv /home/runner/work/StopNoise/StopNoise/build/libs/StopNoise-0.0.1-SNAPSHOT.jar ./  # 새 JAR 파일 이동
            nohup java -jar StopNoise-0.0.1-SNAPSHOT.jar > nohup.out 2>&1 & # 새 애플리케이션 시작